<?php
namespace App\Tests\LevelScripts;

use App\Bytecode\Helper;
use App\Service\Archive\Glg;
use App\Service\Archive\Mls;
use App\Service\Compiler\Compiler;
use Symfony\Bundle\FrameworkBundle\Test\KernelTestCase;

class TriggerNearALoonie extends KernelTestCase
{

    public function test()
    {
        $script = "
scriptmain TriggerScript;

entity triggerNearALoonie : et_name;

var
	lCurrentLoonieName : level_var string[30];

	me : string[30];
	gLoonieName : string[30];


script OnCreate;
begin
	me := GetEntityName(this);

	StringCopy(gLoonieName,	lCurrentLoonieName);
		
	WriteDebug(me, ' : OnCreate - assigned to ', gLoonieName);
end;


script OnEnterTrigger;
begin
	WriteDebug(me, ' : OnEnterTrigger');

		RunScript(me, 'Writhe');
end;


script OnLeaveTrigger;
begin
	WriteDebug(me, ' : OnLeaveTrigger');

	KillScript(me, 'Writhe');
end;


script Writhe;
begin
	while TRUE do
	begin
		AIPlayCommunication( gLoonieName, 'IdleMumbling', 'Comment');

		sleep(RandNum(200) + 300);
	end;
end;


end.

        ";

        $expected = [
            "10000000",
            "0a000000",
            "11000000",
            "0a000000",
            "09000000",
            "12000000",
            "01000000",
            "49000000",
            "10000000",
            "01000000",
            "86000000",
            "21000000",
            "04000000",
            "04000000",
            "90000000",
            "12000000",
            "03000000",
            "1e000000",
            "10000000",
            "04000000",
            "10000000",
            "03000000",
            "48000000",
            "21000000",
            "04000000",
            "01000000",
            "b0000000",
            "12000000",
            "02000000",
            "1e000000",
            "10000000",
            "01000000",
            "10000000",
            "02000000",
            "1c000000",
            "01000000",
            "40170000",
            "1e000000",
            "12000000",
            "02000000",
            "1e000000",
            "10000000",
            "01000000",
            "10000000",
            "02000000",
            "6d000000",
            "21000000",
            "04000000",
            "01000000",
            "90000000",
            "12000000",
            "02000000",
            "1e000000",
            "10000000",
            "01000000",
            "10000000",
            "02000000",
            "73000000",
            "21000000",
            "04000000",
            "01000000",
            "00000000",
            "12000000",
            "02000000",
            "1b000000",
            "10000000",
            "01000000",
            "10000000",
            "02000000",
            "73000000",
            "21000000",
            "04000000",
            "01000000",
            "b0000000",
            "12000000",
            "02000000",
            "1e000000",
            "10000000",
            "01000000",
            "10000000",
            "02000000",
            "73000000",
            "74000000",
            "11000000",
            "09000000",
            "0a000000",
            "0f000000",
            "0a000000",
            "3b000000",
            "00000000",
            "10000000",
            "0a000000",
            "11000000",
            "0a000000",
            "09000000",
            "21000000",
            "04000000",
            "01000000",
            "90000000",
            "12000000",
            "02000000",
            "1e000000",
            "10000000",
            "01000000",
            "10000000",
            "02000000",
            "73000000",
            "21000000",
            "04000000",
            "01000000",
            "1c000000",
            "12000000",
            "02000000",
            "12000000",
            "10000000",
            "01000000",
            "10000000",
            "02000000",
            "73000000",
            "74000000",
            "21000000",
            "04000000",
            "01000000",
            "90000000",
            "12000000",
            "02000000",
            "1e000000",
            "10000000",
            "01000000",
            "10000000",
            "02000000",
            "21000000",
            "04000000",
            "01000000",
            "30000000",
            "12000000",
            "02000000",
            "07000000",
            "10000000",
            "01000000",
            "10000000",
            "02000000",
            "e4000000",
            "11000000",
            "09000000",
            "0a000000",
            "0f000000",
            "0a000000",
            "3b000000",
            "00000000",
            "10000000",
            "0a000000",
            "11000000",
            "0a000000",
            "09000000",
            "21000000",
            "04000000",
            "01000000",
            "90000000",
            "12000000",
            "02000000",
            "1e000000",
            "10000000",
            "01000000",
            "10000000",
            "02000000",
            "73000000",
            "21000000",
            "04000000",
            "01000000",
            "38000000",
            "12000000",
            "02000000",
            "12000000",
            "10000000",
            "01000000",
            "10000000",
            "02000000",
            "73000000",
            "74000000",
            "21000000",
            "04000000",
            "01000000",
            "90000000",
            "12000000",
            "02000000",
            "1e000000",
            "10000000",
            "01000000",
            "10000000",
            "02000000",
            "21000000",
            "04000000",
            "01000000",
            "4c000000",
            "12000000",
            "02000000",
            "07000000",
            "10000000",
            "01000000",
            "10000000",
            "02000000",
            "e5000000",
            "11000000",
            "09000000",
            "0a000000",
            "0f000000",
            "0a000000",
            "3b000000",
            "00000000",
            "10000000",
            "0a000000",
            "11000000",
            "0a000000",
            "09000000",
            "12000000",
            "01000000",
            "01000000",
            "24000000",
            "01000000",
            "00000000",
            "3f000000",
            "58040000",
            "21000000",
            "04000000",
            "01000000",
            "b0000000",
            "12000000",
            "02000000",
            "1e000000",
            "10000000",
            "01000000",
            "10000000",
            "02000000",
            "21000000",
            "04000000",
            "01000000",
            "54000000",
            "12000000",
            "02000000",
            "0d000000",
            "10000000",
            "01000000",
            "10000000",
            "02000000",
            "21000000",
            "04000000",
            "01000000",
            "64000000",
            "12000000",
            "02000000",
            "08000000",
            "10000000",
            "01000000",
            "10000000",
            "02000000",
            "fe010000",
            "12000000",
            "01000000",
            "c8000000",
            "10000000",
            "01000000",
            "69000000",
            "10000000",
            "01000000",
            "12000000",
            "01000000",
            "2c010000",
            "0f000000",
            "04000000",
            "31000000",
            "01000000",
            "04000000",
            "10000000",
            "01000000",
            "6a000000",
            "3c000000",
            "5c030000",
            "11000000",
            "09000000",
            "0a000000",
            "0f000000",
            "0a000000",
            "3b000000",
            "00000000"
        ];

        $compiler = new Compiler();
        $levelScriptCompiled = $compiler->parse(file_get_contents(__DIR__ . '/0#levelscript.srce'));


        $compiler = new Compiler();
        $compiled = $compiler->parse($script, $levelScriptCompiled);

        if ($compiled['CODE'] != $expected){
            foreach ($compiled['CODE'] as $index => $item) {
//                    echo ($index + 1) . '->' . $item . "\n";
                if ($expected[$index] == $item){
                    echo ($index + 1) . '->' . $item . "\n";
                }else{
                    echo "MISSMATCH need " . $expected[$index] . " got " . $compiled['CODE'][$index] . "\n";
                }
            }
            exit;
        }

        $this->assertEquals($compiled['CODE'], $expected, 'The bytecode is not correct');
    }


}