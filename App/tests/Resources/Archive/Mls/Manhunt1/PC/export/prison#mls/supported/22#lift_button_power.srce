
{$t-}	{	trace off 					}
{	Program Description					}
{										}

SCRIPTMAIN		Lift_Button_Power;
{ Entity To Run Script From 			}
ENTITY
	
Gen_Buttons_(S)05 : et_name;




CONST

	ALARM_FLASH_ON_INACTIVE		= 0.5;
	ALARM_FLASH_OFF_INACTIVE	= 0.5;
	ALARM_FLASH_ON_ACTIVE		= 0.05;
	ALARM_FLASH_OFF_ACTIVE		= 0.05;

VAR
	AlarmBoxEffect	: EffectPtr;
	rgbaStart		: RGBAInt;
	pDoor			: EntityPtr;
	
SCRIPT OnCreate;
VAR
	
	AlarmBoxMatrix	: MatrixPtr;
	AlarmVec		: Vec3d;
{	Program Start	}
begin


	
	{ Get a new effect based on the template 			}
	AlarmBoxEffect := NewParticleEffect('AlarmBox');

	{ Get the Position (MATRIX) of this entity }
	AlarmBoxMatrix := GetEntityMatrix(this);
	{ Attach it to this entities matrix} 
	AttachEffectToMatrix(AlarmBoxEffect, AlarmBoxMatrix);

	{ Need to offset it to be in front of this entity }
	AlarmVec.x :=  -0.05;
	AlarmVec.y := 0.20;
	AlarmVec.z :=  0.0;
	SetEffectPosition(AlarmBoxEffect, AlarmVec);

	{ Set the Effect to 'Reset Alarm Condition }
	{ incase the effect template gets modified }
	RunScript('Gen_Buttons_(S)05', 'Power_Off');

	{ Create and Start the effect	}	
	CreateEffect(AlarmBoxEffect);
		
end;{ End subscript}
	










SCRIPT	OnUseByPlayer;
{ Entity To Run Script From 			}


VAR
	powerstate : INTEGER;	
	switchptr  : EntityPtr;

{	Program Start	}
begin
	
	
	
	switchptr:=GetEntity('Gen_Buttons_(S)05');
		
	powerstate:=GetSwitchState(switchptr);
	Writedebug('State of power lever is ',powerstate);
	IF powerstate = 1 THEN
	begin

	RunScript('Gen_Buttons_(S)05', 'Power_On');

	{DISPLAYGAMETEXT('POWON');}
	end
	
	ELSE
	begin

	RunScript('Gen_Buttons_(S)05', 'Power_Off');


	{DISPLAYGAMETEXT('POWOFF');}
	end;
	
		
	Writedebug('Power switch flicked!');
	AITriggerSound('ALARM', this);

	
end;			
	
	
	
	
SCRIPT Power_Off;
VAR
	rgbaStart	:	RGBAInt;
begin
	WriteDebug('Power state off');

	
	pDoor:=GetEntity('Bow_Prison_CellDoor_(SD)05');
	
	{SetSlideDoorAjarDistance(pDoor, 2.0);}
	SetSlideDoorSpeed(pDoor, 2.0);
    SetDoorState(pDoor, DOOR_CLOSING);
    ASSERT(GraphModifyConnections(pDoor, AISCRIPT_GRAPHLINK_ALLOW_NOTHING));

	
	
	rgbaStart.red	:=255;
	rgbaStart.green	:=0;
	rgbaStart.blue	:=0;
	rgbaStart.alpha	:=200;

	{ Set Start and End RGBA Values (Both are the same)}
	SetEffectRGBAStart(AlarmBoxEffect, rgbaStart);
	SetEffectRGBAEnd(AlarmBoxEffect, rgbaStart);
	SetEffectPauseCycle(AlarmBoxEffect, ALARM_FLASH_ON_INACTIVE);
	SetEffectPauseLength(AlarmBoxEffect, ALARM_FLASH_OFF_INACTIVE);
	SetEffectRadius(AlarmBoxEffect, 0.0);
	
end;


SCRIPT Power_On;
VAR
	rgbaStart	:	RGBAInt;
begin
	WriteDebug('Power state on');


	

	rgbaStart.red	:=0;
	rgbaStart.green	:=255;
	rgbaStart.blue	:=0;
	rgbaStart.alpha	:=200;

	{ Set Start and End RGBA Values (Both are the same)}
	SetEffectRGBAStart(AlarmBoxEffect, rgbaStart);
	SetEffectRGBAEnd(AlarmBoxEffect, rgbaStart);
	SetEffectPauseCycle(AlarmBoxEffect, ALARM_FLASH_ON_INACTIVE);
	SetEffectPauseLength(AlarmBoxEffect, ALARM_FLASH_OFF_INACTIVE);
	SetEffectRadius(AlarmBoxEffect, 0.0);
	

	pDoor:=GetEntity('Bow_Prison_CellDoor_(SD)05');
	SetSlideDoorSpeed(pDoor, 0.8);
	SetSlideDoorAjarDistance(pDoor, 2.4);
    SetDoorState(pDoor, DOOR_OPENING);
    ASSERT(GraphModifyConnections(pDoor, AISCRIPT_GRAPHLINK_ALLOW_EVERYTHING));
	
	
end;
	
	
{	Program End		}
end.