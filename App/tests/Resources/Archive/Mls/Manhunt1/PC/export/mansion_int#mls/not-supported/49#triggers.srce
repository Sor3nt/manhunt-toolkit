SCRIPTMAIN		Triggers;

ENTITY
	Hunters_Generator		:	et_name;

CONST
MIN_GUARDS_IN_MANSION		= 3; {Set this to the min number of hunters in the MANSION_GUARDS pack}

MIN_GUARDS_IN_MANSION2		= 3; {Set this to the min number of hunters in the MANSION2_GUARDS pack}

ADD_GUARDS_IN_MANSION		= 3; {Set this to how many to add to both GUARDS packs}

MAX_REINFORCEMENTS			= 16; {The TOTAL hunters spawnable before this script is killed }

TIME_BETWEEN_SPAWNS			= 10000; {Milliseconds before each spawn}

VAR
sString32					: string[32];
i,
iSamplePlay,
iGuards_Spanwed_So_Far		: integer;

{LEVEL SCOPED VARS}
bAreHuntersSpawning 	: level_var boolean;
level_bIsAlertOn		: level_var boolean;

{***************************************** FUNCTION HEADERS *******************************************}
FUNCTION FindSpawnPoint() : integer; FORWARD;
FUNCTION SpawnCollisionChecker(iPointIdx : integer) : boolean; FORWARD;
FUNCTION SpawnHunterAtSpawnPointWithWeapon_Name_Type_Pack
	(iPointIdx : integer ; sWeapon : eCollectableType; iAmmo : integer ; sName, sType, sPack : string) 
	: entityptr; FORWARD;	
{************************************** END OF FUNCTION HEADERS ***************************************}

{ *** 
	THIS ENTITY CREATES REINFORCEMENTS FOR THE MANSION GUARDS SUBPACK IF AN ALERT IS RAISED 
	AND THERE ARE LESS THAN 50% OF PACK MEMBERS IN THE LEVEL 
	
	ADDED: 24/07/03 AND ON REQUEST FROM ELEVATOR LEVER
*** }



SCRIPT OnCreate;
BEGIN
	
	WriteDebug('Hunters Generator: OnCreate');
	iGuards_Spanwed_So_Far := 0;
	bAreHuntersSpawning := FALSE;
	iSamplePlay := 0;
	
End;

SCRIPT OnAlert;
VAR
iMansion_Guards_Left,	
iSpawnPoint,
i						: integer;
pHunter					: entityptr;
sHunterName				: string[32];
BEGIN
	
	{Check if ALL possible reinforcements have been depleted}
	if (iGuards_Spanwed_So_Far >= MAX_REINFORCEMENTS) then 
	begin
		writedebug('Hunters Generator: Limit MAX_REINFORCEMENTS reached');
		removethisscript;
	end;
	
	{Check if the MANSION_GUARDS subpack has been decimated, in case spawn more hunters}
	iMansion_Guards_Left := AINumberInSubPack('LEADER', 'MANSION_GUARDS');	
	
	
	if (iMansion_Guards_Left <= MIN_GUARDS_IN_MANSION) then
	begin			
		
		if (iSamplePlay <= 3) then iSamplePlay:= iSamplePlay +1
		else iSamplePlay := 1;
		
		CASE iSamplePlay of
			1: 	begin
					PlayAudioOneShotFromPos(GetCameraPosition,SFX_C1V2_SCRIPTED_MANSION_1,-1,-1);
					PlayHunterSpeechPlaceHolder('SUPRT1');
				end;
			2: 	begin
					PlayAudioOneShotFromPos(GetCameraPosition,SFX_C1V2_SCRIPTED_MANSION_2,-1,-1);
					PlayHunterSpeechPlaceHolder('SUPRT2');
				end;
			3: 	begin
					PlayAudioOneShotFromPos(GetCameraPosition,SFX_C1V2_SCRIPTED_MANSION_3,-1,-1); 
					PlayHunterSpeechPlaceHolder('SUPRT3');
				end;
		end;
				
		for i := 1 to ADD_GUARDS_IN_MANSION do
		begin			
									
			while bAreHuntersSpawning do sleep(1);
			bAreHuntersSpawning := TRUE;
			
			while NOT SpawnCollisionChecker(iSpawnPoint) do sleep(500);
			
			{find the most suitable spawn point}
			iSpawnPoint := FindSpawnPoint;
			
			{Now spawn a hunter}			
			pHunter := SpawnHunterAtSpawnPointWithWeapon_Name_Type_Pack(iSpawnPoint,CT_DESERT_EAGLE,8,'','Cerberus','MANSION_GUARDS');
			
			if (pHunter <> NIL) then
			begin
				{increase the counter of reinforcements spawned}
				iGuards_Spanwed_So_Far := iGuards_Spanwed_So_Far + 1;
				
				{give this hunter a mansion guard template}
				sHunterName := getEntityName(pHunter);
				writedebug('Assigning Mansion_Guard Template Script to ',sHunterName);
				ASSERT(SetEntityScriptsFromEntity('Mansion_Guard_Temp',sHunterName));
				runscript(sHunterName,'OnCreateHunter');
				
				{Assign the Patrols}
				CASE i of
				1: runscript(sHunterName,'GetPath1');
				2: runscript(sHunterName,'GetPath2');
				3: runscript(sHunterName,'GetPath3');
				4: runscript(sHunterName,'GetPath4');
				5: runscript(sHunterName,'GetPath5');				
				end;
				
				{Define a goto goal to send him away from the spawn vector or the game will crash}
				CASE iSpawnPoint of
				1: AIDefineGoalGotoNode(sHunterName,sHunterName,AISCRIPT_LOWPRIORITY,'GoFromSpawn1',AISCRIPT_RUNMOVESPEED,TRUE);
				2: AIDefineGoalGotoNode(sHunterName,sHunterName,AISCRIPT_LOWPRIORITY,'GoFromSpawn2',AISCRIPT_RUNMOVESPEED,TRUE);
				3: AIDefineGoalGotoNode(sHunterName,sHunterName,AISCRIPT_LOWPRIORITY,'GoFromSpawn3',AISCRIPT_RUNMOVESPEED,TRUE);
				end;
				
				AIAddGoalForSubPack('LEADER', 'MANSION_GUARDS',sHunterName);
				
				{sleep a bit}
				sleep(TIME_BETWEEN_SPAWNS);	
				AIDeleteGoalDefinition(sHunterName);
				
			end;
			bAreHuntersSpawning := FALSE;
					
		end;
		
		sleep(TIME_BETWEEN_SPAWNS);
		
	end;
	
	
	{Check if the MANSION2_GUARDS subpack has been decimated, in case spawn more hunters}
	
	iMansion_Guards_Left := AINumberInSubPack('LEADER', 'MANSION2_GUARDS');	
	
	if (iMansion_Guards_Left <= MIN_GUARDS_IN_MANSION2) then
	begin					
		
		for i := 1 to ADD_GUARDS_IN_MANSION do
		begin			
			
			while bAreHuntersSpawning do sleep(1);
		
			bAreHuntersSpawning := TRUE;

			while NOT SpawnCollisionChecker(iSpawnPoint) do sleep(1);
			
			{find the most suitable spawn point}
			iSpawnPoint := FindSpawnPoint;
			
			{Now spawn a hunter}			
			pHunter := SpawnHunterAtSpawnPointWithWeapon_Name_Type_Pack(iSpawnPoint,CT_COLT_COMMANDO,10,'','Cerberus','MANSION2_GUARDS');
			
			if (pHunter <> NIL) then
			begin
				{increase the counter of reinforcements spawned}
				iGuards_Spanwed_So_Far := iGuards_Spanwed_So_Far + 1;
				
				{give this hunter a mansion2 guard template}
				sHunterName := getEntityName(pHunter);
				writedebug('Assigning Mansion2_Guard Template Script to ',sHunterName);
				ASSERT(SetEntityScriptsFromEntity('Mansion2_Guard_Temp',sHunterName));
				runscript(sHunterName,'OnCreateHunter');
				
				{Assign the Patrols}
				CASE i of
				1: runscript(sHunterName,'GetPath1');
				2: runscript(sHunterName,'GetPath2');
				3: runscript(sHunterName,'GetPath3');
				4: runscript(sHunterName,'GetPath4');		
				end;
				
				{Define a goto goal to send him away from the spawn vector or the game will crash}								
				CASE iSpawnPoint of
				1: AIDefineGoalGotoNode(sHunterName,sHunterName,AISCRIPT_LOWPRIORITY,'GoFromSpawn1',AISCRIPT_RUNMOVESPEED,TRUE);
				2: AIDefineGoalGotoNode(sHunterName,sHunterName,AISCRIPT_LOWPRIORITY,'GoFromSpawn2',AISCRIPT_RUNMOVESPEED,TRUE);
				3: AIDefineGoalGotoNode(sHunterName,sHunterName,AISCRIPT_LOWPRIORITY,'GoFromSpawn3',AISCRIPT_RUNMOVESPEED,TRUE);
				end;
				
				AIAddGoalForSubPack('LEADER', 'MANSION2_GUARDS',sHunterName);
				
				{sleep a bit}
				sleep(TIME_BETWEEN_SPAWNS);	
				
				AIDeleteGoalDefinition(sHunterName);
			end;
			
			bAreHuntersSpawning := FALSE;
		
		end;
	
		sleep(TIME_BETWEEN_SPAWNS);
	
	end;
	
End;

SCRIPT LeverSpawnHunters;
VAR
iSpawnPoint	: integer;
pHunter		: entityptr;

BEGIN		
		
		iSpawnPoint := 4;
		pHunter := SpawnHunterAtSpawnPointWithWeapon_Name_Type_Pack(iSpawnPoint,CT_COLT_COMMANDO,10,'Guard22','Cerberus','MANSION2_GUARDS');
		if (pHunter <> NIL) then
		begin
			runscript(GetEntityName(pHunter),'OnCreate');
			Writedebug('Created: ',GetEntityName(pHunter));				
		end;
		
		iSpawnPoint := 5;
		pHunter := SpawnHunterAtSpawnPointWithWeapon_Name_Type_Pack(iSpawnPoint,CT_COLT_COMMANDO,10,'Guard23','Cerberus','MANSION2_GUARDS');
		if (pHunter <> NIL) then
		begin
			runscript(GetEntityName(pHunter),'OnCreate');
			Writedebug('Created: ',GetEntityName(pHunter));				
		end;
	
		runScript('Hunters_Generator','SpawnExtraMansion2');	
		
End;

SCRIPT SpawnExtraMansion2;
VAR
iMansion_Guards_Left,	
iSpawnPoint,
i						: integer;
pHunter					: entityptr;
sHunterName				: string[32];
BEGIN

	{Check if the MANSION2_GUARDS subpack has been decimated, in case spawn more hunters}	
	iMansion_Guards_Left := AINumberInSubPack('LEADER', 'MANSION2_GUARDS');	
	WriteDebug('SpawnExtraMansion2: iMansion_Guards_Left: ',iMansion_Guards_Left);
	
	if (iMansion_Guards_Left <= 5) then
	begin			
		
		for i := 1 to 3 do
		begin			
			{find the most suitable spawn point}
			iSpawnPoint := 3;
			
			WriteDebug('SpawnExtraMansion2: before bAreHuntersSpawning');
			
			while bAreHuntersSpawning do sleep(1);
			bAreHuntersSpawning := TRUE;
			WriteDebug('SpawnExtraMansion2: after bAreHuntersSpawning');
			
			while NOT SpawnCollisionChecker(iSpawnPoint) do sleep(1);
			
			WriteDebug('SpawnExtraMansion2: after SpawnCollisionChecker');
			
			{spawn a hunter}
			pHunter := SpawnHunterAtSpawnPointWithWeapon_Name_Type_Pack(iSpawnPoint,CT_COLT_COMMANDO,10,'','Cerberus','MANSION2_GUARDS');
			if (pHunter <> NIL) then
			begin
				
				{give this hunter a mansion2 guard template}
				sHunterName := getEntityName(pHunter);
				writedebug('Assigning Mansion2_Guard Template Script to ',sHunterName);
				ASSERT(SetEntityScriptsFromEntity('Mansion2_Guard_Temp',sHunterName));
				runscript(sHunterName,'OnCreateHunter');
				
				{Assign the Patrols}
				CASE i of
				1: runscript(sHunterName,'GetPath1');
				2: runscript(sHunterName,'GetPath2');
				3: runscript(sHunterName,'GetPath3');
				4: runscript(sHunterName,'GetPath4');		
				end;
				
				{Define a goto goal to send him away from the spawn vector - 
				*** WARNING THIS IS A SPECIAL HIGH GOTO TO AVOID THEM RUNNING IN BASEMENT!}
				AIDefineGoalGotoNode(sHunterName,sHunterName,AISCRIPT_HIGHPRIORITY,'GoFromSpawn3',AISCRIPT_RUNMOVESPEED,TRUE);
				AIAddGoalForSubPack('LEADER', 'MANSION2_GUARDS',sHunterName);
				
				{sleep a bit before looping to avoid spawning guys one on top of the other}
				sleep(500);	
				AIDeleteGoalDefinition(sHunterName);
			end;
			
			bAreHuntersSpawning := FALSE;
			
		end;
	
	end;
	
	if NOT level_bIsAlertOn then runscript('Alert_Manager','RaiseAlert')
	else runscript('Alert_Manager','AreaCheck');


End;

{********************************* FUNCTION DECLARATIONS *********************************}










FUNCTION FindSpawnPoint;
{: integer}
VAR
sAreaName : string[32];

BEGIN	
	
	sAreaName := GetPlayerAreaName;
	
	{---- WEST SECTION OF MANSION ----}
	if (sAreaName = 'aicellar') then FindSpawnPoint:=1
	else if (sAreaName = 'aicorridor1') then FindSpawnPoint:=1
	else if (sAreaName = 'aicorridor2') then FindSpawnPoint:=1
	else if (sAreaName = 'aicorridor3') then FindSpawnPoint:=1
	else if (sAreaName = 'ailibrary') then FindSpawnPoint:=1
	else if (sAreaName = 'aivestibule') then FindSpawnPoint:=1
	else if (sAreaName = 'aidinningroom') then FindSpawnPoint:=1
	else if (sAreaName = 'aibar') then FindSpawnPoint:=1
	else if (sAreaName = 'aibilliard') then FindSpawnPoint:=1
	else if (sAreaName = 'ailounge') then FindSpawnPoint:=1
	else if (sAreaName = 'aitransit') then FindSpawnPoint:=1
	
	{---- EST SECTION OF MANSION ----}
	else if (sAreaName = 'aientrastart') then FindSpawnPoint:=2
	else if (sAreaName = 'aientrance') then FindSpawnPoint:=2	
	else if (sAreaName = 'aistairstower') then FindSpawnPoint:=2	
	
	{---- UPPER CORRIDOR SECTION OF MANSION ----}
	else if (sAreaName = 'aicorridor4') then FindSpawnPoint:=3
	else if (sAreaName = 'aiarmoury') then FindSpawnPoint:=3
	else if (sAreaName = 'aisecurity') then FindSpawnPoint:=3	
	
	{---- BASEMENT SECTION OF MANSION ----}
	else if (sAreaName = 'aibasement') then FindSpawnPoint:=3
	
	{---- DEFAULT IF UNKNOWN AREA ----}
	else FindSpawnPoint := 1;
	
	
End;

{************************************************}

FUNCTION SpawnHunterAtSpawnPointWithWeapon_Name_Type_Pack;
{	(iPointIdx : integer ; sWeapon : eCollectableType; iAmmo : integer ; sName, sType, sPack : string) 
	: entityptr	}
VAR
vGuyPoz	: vec3d;
pNewEntity	: entityptr;
sEntityName	: string[32];

BEGIN

	CASE iPointIdx OF
	1: vGuyPoz:=GetEntityPosition(GetEntity('SpawnPoint1'));
	2: vGuyPoz:=GetEntityPosition(GetEntity('SpawnPoint2'));
	3: vGuyPoz:=GetEntityPosition(GetEntity('SpawnPoint3'));
	4: vGuyPoz:=GetEntityPosition(GetEntity('SpawnPoint4'));
	5: vGuyPoz:=GetEntityPosition(GetEntity('SpawnPoint5'));
	end;

	if (sName = '') then pNewEntity := SpawnMovingEntity(sType,vGuyPoz,'ScriptCreateName')
	else pNewEntity := SpawnMovingEntity(sType,vGuyPoz,sName);
			
	if(true = CreateInventoryItem(sWeapon, pNewEntity, TRUE))  then
	begin        
    	AddAmmoToInventoryWeapon(pNewEntity, sWeapon, iAmmo);
    	SetHunterDropAmmo(pNewEntity,iAmmo);
    end; 
    		
    if(nil <> pNewEntity) then 
	begin
		sEntityName := GetEntityName(pNewEntity);
		AIAddEntity(sEntityName);
		AIAddHunterToLeaderSubPack('LEADER',sPack,sEntityName);	
		AISetIdleHomeNode(sEntityName,'');										
	end;  			
    	
    SpawnHunterAtSpawnPointWithWeapon_Name_Type_Pack := pNewEntity;   
End;


{************************************************}

FUNCTION SpawnCollisionChecker; {PAR iPointIdx : integer }
VAR
vPos	: vec3d;
BEGIN

	CASE iPointIdx OF
	1: vPos:=GetEntityPosition(GetEntity('SpawnPoint1'));
	2: vPos:=GetEntityPosition(GetEntity('SpawnPoint2'));
	3: vPos:=GetEntityPosition(GetEntity('SpawnPoint3'));
	end;
	
	{off-set to avoid even more collision crashes}
	vPos.x := vPos.x + 0.5;
	vPos.y := vPos.y + 0.5;
	vPos.z := vPos.z + 0.5;

	CreateSphereTrigger(vPos,1.0,'SpawnCollisionChecker');
	sleep(10);
	TriggerAddEntityClass(GetEntity('SpawnCollisionChecker'), COL_HUNTER);
	sleep(10);
 
	WHILE( 
	(EnteredTriggerType(GetEntity('SpawnCollisionChecker'),EC_HUNTER)) 
	OR 
	(InsideTriggerType(GetEntity('SpawnCollisionChecker'),EC_HUNTER)) 
	) DO sleep(100);
				
	KillEntity(GetEntity('SpawnCollisionChecker'));
	
	SpawnCollisionChecker := TRUE;
	
End;

END.   